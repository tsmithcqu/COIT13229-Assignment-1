package FitnessClub;

import java.net.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class UDPServer {
    public static void main(String args[]) {
        DatagramSocket aSocket = null;
        try {
            aSocket = new DatagramSocket(2245); // Create a UDP socket bound to the specified port. 
            
            while (true) {
                byte[] buffer = new byte[1000];  // Buffer for receiving incoming requests.

                // Receive request from client.
                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
                aSocket.receive(request);
                
                // Extract file name from request.
                String fileName = new String(request.getData(), 0, request.getLength());
                System.out.println("File requested by Client: " + fileName);

                // The below portion of code was generated by Gen AI, however the comments were added by me to prove my understanding. 
                // Attempt to read Java Objects from the file.
                ObjectInputStream objectInput = new ObjectInputStream(new FileInputStream(fileName)); // Create an ObjectInputStream to read objects from the file.
                Object memberDetails = objectInput.readObject();  // Read the object from the file.
                objectInput.close(); // Close the ObjectInputStream.

                // The below portion of code was generated by Gen AI, however the comments were added by me to prove my understanding. 
                // Convert member details to bytes and send back to client
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream(); // Create a ByteArrayOutputStream to hold the bytes of the object.
                ObjectOutputStream os = new ObjectOutputStream(new BufferedOutputStream(byteStream)); // Wrap the ByteArrayOutputStream in an ObjectOutputStream.
                os.flush(); // Flush the ObjectOutputStream to clear any buffered data.
                os.writeObject(memberDetails); // Serialize the memberDetails object into bytes and write them to the byteStream.
                os.flush(); // Flush the ObjectOutputStream again to ensure all data is written out.
                byte[] sendBuf = byteStream.toByteArray();  // Convert the serialized object bytes to a byte array to be sent.

                // The below portion of code was generated by Gen AI, however the comments were added by me to prove my understanding. 
                // Prepare and send the packet containing the response back to the client
                DatagramPacket reply = new DatagramPacket(sendBuf, sendBuf.length, request.getAddress(), request.getPort()); // Create a DatagramPacket containing the byte array to send back to the client.
                aSocket.send(reply); // Send the packet through the DatagramSocket to the client.
                os.close(); // Close the ObjectOutputStream to free system resources associated with the stream.
            }
        } catch (SocketException e) {
        System.out.println("Socket: " + e.getMessage());
        } catch (IOException e) {
        System.out.println("IO: " + e.getMessage());
        }
    }
}

